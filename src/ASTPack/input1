void merge(int array[], int left, int mid,
		int right)
{
left = 0;
mid =2;
right = 4;
	int subArrayOne;
	subArrayOne = mid - left;
	subArrayOne = 3;
	int subArrayTwo;
	subArrayTwo = right - mid;
	subArrayTwo = 2;

	   int leftArray[3];
		int rightArray[2];

	for (i = 0; i < subArrayOne; i++)
		leftArray[i] = array[left + i];
	for (j = 0; j < subArrayTwo; j++)
		rightArray[j] = array[mid + j];

	indexOfSubArrayOne = 0, indexOfSubArrayTwo = 0;
	int indexOfMergedArray;
	indexOfMergedArray = 10;

	while (indexOfSubArrayOne < subArrayOne
		&& indexOfSubArrayTwo < subArrayTwo) {
		if (leftArray[indexOfSubArrayOne]
			<= rightArray[indexOfSubArrayTwo]) {
			array[indexOfMergedArray]
				= leftArray[indexOfSubArrayOne];
			indexOfSubArrayOne++;
		}
		else {
			array[indexOfMergedArray]
				= rightArray[indexOfSubArrayTwo];
			indexOfSubArrayTwo++;
		}
		indexOfMergedArray++;
	}
	while (indexOfSubArrayOne < subArrayOne) {
		array[indexOfMergedArray]
			= leftArray[indexOfSubArrayOne];
		indexOfSubArrayOne++;
		indexOfMergedArray++;
	}

	while (indexOfSubArrayTwo < subArrayTwo) {
		array[indexOfMergedArray]
			= rightArray[indexOfSubArrayTwo];
		indexOfSubArrayTwo++;
		indexOfMergedArray++;
	}
	 leftArray;
	rightArray;
}

void mergeSort(int array[], int begin, int end)
{
begin =0;
end =4;
	if (begin >= end)
		return;

	int mid;
	mid = begin + (end - begin) / 2;
	mid =2;
	mergeSort(array, begin, mid);
	mergeSort(array, mid + 1, end);
	merge(array, begin, mid, end);
}

int main()
{
	int arr[5];
	arr[0] = 1;
	arr[1] = 2;
	arr[2] = 7;
	arr[3] = 3;
	arr[4] = 4;
	int arr_size;
	arr_size=5;
	cout << "Given array is \n";
	void mergeSort();
	mergeSort(arr, 0, 4);

	cout << "\nSorted array is \n";
	return 0;
}

